set ts=4 sw=4 et
set encoding=utf-8
set ve+=onemore
set <up>=^[OA
set <down>=^[OB
set <right>=^[OC
set <left>=^[OD

set nocompatible              " be iMproved, required
filetype off                  " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" color scheme
Plugin 'flazz/vim-colorschemes'

" The status bar and its color
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='bubblegum'
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif

" Github integration
Plugin 'tpope/vim-fugitive'

" Auto completion
Plugin 'valloric/youcompleteme'

" Support markdown files
Plugin 'plasticboy/vim-markdown'

" A file explorer
Plugin 'scrooloose/nerdtree'
map \\ :NERDTreeToggle<CR>
" Autonmatically close the nerdtree panel when it is the only panel
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Automatically open the nerdtree if no file is specified by vim open
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" Change the icon to prevent incorrect cursor position
let g:NERDTreeShowHidden = 1
let g:NERDTreeWinSize=60
" The default for OpenVSplit is 's', conflicts with easymotion
let g:NERDTreeMapOpenVSplit=''
" To enable opening files in a new tab by default, at the same time doing its
" job correctly to toggle folders
Plugin 'Nopik/vim-nerdtree-direnter'
let g:NERDTreeMapOpenInTab='<ENTER>'

" Smart line number
Plugin 'myusuf3/numbers.vim'

Plugin 'tpope/vim-surround'

" Quick cursor jump
Plugin 'easymotion/vim-easymotion'
map <Leader> <Plug>(easymotion-prefix)
" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)
" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)
" Move to line
map <Leader>l <Plug>(easymotion-bd-jk)
nmap <Leader>l <Plug>(easymotion-overwin-line)
" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

" Connect tmux with vim
Plugin 'christoomey/vim-tmux-navigator'
" Set the split nagivation key for INSIDE vim
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Synchronize the color scheme between tmux and vim
Plugin 'edkolev/tmuxline.vim'
let g:tmuxline_preset = {
    \'a'    : '#S(#H)',
    \'b'    : '#W',
    \'c'    : '%a %R',
    \'win'  : '#I #W',
    \'cwin' : '#I #W',
    \'x'    : '',
    \'y'    : '',
    \'z'    : ''}
let g:tmuxline_separators = {
    \ 'left' : '',
    \ 'left_alt': '>',
    \ 'right' : '',
    \ 'right_alt' : '<',
    \ 'space' : ' '}

" Show the indent level
Plugin 'yggdroot/indentline'
let g:indentLine_char = '>'

" Shortcut for commenting
Plugin 'scrooloose/nerdcommenter'
filetype plugin on
let g:NERDRemoveExtraSpaces = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NERDSpaceDelims = 1
inoremap ,, <C-o>:call NERDComment(0,"toggle")<C-m>
nnoremap ,, :call NERDComment(0,"toggle")<C-m>

" Quick toggle between tabs
nnoremap <Space>1 1gt
nnoremap <Space>2 2gt
nnoremap <Space>3 3gt
nnoremap <Space>4 4gt
nnoremap <Space>5 5gt
nnoremap <Space>6 6gt
nnoremap <Space>7 7gt
nnoremap <Space>8 8gt
nnoremap <Space>9 9gt
nnoremap <Space>0 :tablast<cr>
" Go to last active tab
au TabLeave * let g:lasttab = tabpagenr()
nnoremap <silent> <Space><Space> :exe "tabn ".g:lasttab<cr>
vnoremap <silent> <Space><Space> :exe "tabn ".g:lasttab<cr>

" Advanced search and highlighting
Plugin 'haya14busa/incsearch.vim'
Plugin 'haya14busa/incsearch-easymotion.vim'
Plugin 'haya14busa/incsearch-fuzzy.vim'
nmap / <Plug>(incsearch-easymotion-/)
" nmap ? <Plug>(incsearch-easymotion-?)
" map g/ <Plug>(incsearch-easymotion-stay)
" incsearch.vim x fuzzy x vim-easymotion
function! s:config_easyfuzzymotion(...) abort
  return extend(copy({
    \   'converters': [incsearch#config#fuzzy#converter()],
    \   'modules': [incsearch#config#easymotion#module()],
    \   'keymap': {"\<CR>": '<Over>(easymotion)'},
    \   'is_expr': 0,
    \   'is_stay': 1
    \ }), get(a:, 1, {}))
endfunction
nnoremap <silent><expr> <Space>/ incsearch#go(<SID>config_easyfuzzymotion())

" Automatically highlight
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    " echo 'Highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    " echo 'Highlight current word: ON'
    return 1
  endif
endfunction

Plugin 'xuyuanp/nerdtree-git-plugin'

" Scroll multiple lines using c-e and c-y
nnoremap <C-e> 5<C-e>
nnoremap <C-y> 5<C-y>

" Prevent <esc> key to move back a space
inoremap <esc> <esc>l


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" All of your Plugins must be added before the following line
call vundle#end()            " required
syntax on
colorscheme monokai-phoenix
